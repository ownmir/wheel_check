!!! Prev file: vyperBuiltinFunctions  !!!

	Interfaces
Интерфейсы

An interface is a set of function definitions used to enable communication between smart contracts. 
A contract interface defines all of that contract’s externally available functions. 
By importing the interface, your contract now knows how to call these functions in other contracts.

Интерфейс - это набор определений функций, используемых для обеспечения связи между смарт-контрактами. 
Интерфейс контракта определяет все доступные извне функции этого контракта. 
Благодаря импорту интерфейса ваш контракт теперь знает, как вызывать эти функции в других контрактах.

	Declaring and using Interfaces Объявление и использование интерфейсов

Interfaces can be added to contracts either through inline definition, or by importing them from a seperate file.
The interface keyword is used to define an inline external interface:

Интерфейсы могут быть добавлены в контракты либо посредством встроенного определения, либо путем импорта их из отдельного файла.
Ключевое слово interface используется для определения встроенного внешнего интерфейса:
	code:
interface FooBar:
    def calculate() -> uint256: view
    def test1(): nonpayable

The defined interface can then be use to make external calls, given a contract address:
Определенный интерфейс можно затем использовать для внешних вызовов, передавая адрес контракта:
	code:
@external
def test(some_address: address):
    FooBar(some_address).calculate()

The interface name can also be used as a type annotation for storage variables. 
You then assign an address value to the variable to access that interface. 
Note that assignment of an address requires the value to be cast using the interface type e.g. FooBar(<address_var>):
Имя интерфейса также можно использовать в качестве аннотации типа для переменных хранения. 
Затем вы присваиваете значение адреса переменной для доступа к этому интерфейсу. 
Обратите внимание, что для присвоения адреса требуется приведение значения с использованием типа интерфейса, например 
FooBar (<address_var>):
	code:
foobar_contract: FooBar

@external
def __init__(foobar_address: address):
    self.foobar_contract = FooBar(foobar_address)

@external
def test():
    self.foobar_contract.calculate()

Specifying payable or nonpayable annotation indicates that the call made to the external contract will be able to alter storage, 
whereas the view pure call will use a STATICCALL ensuring no storage can be altered during execution. 
Additionally, payable allows non-zero value to be sent along with the call.

Указание payable или nonpayable аннотации указывает на то, что вызов внешнего контракта сможет изменить хранилище, 
тогда как чистый вызов просмотра будет использовать STATICCALL, гарантируя, что хранилище не может быть изменено во время выполнения. 
Кроме того, payable позволяет отправлять вместе с вызовом ненулевое значение.
	code:
interface FooBar:
    def calculate() -> uint256: pure
    def query() -> uint256: view
    def update(): nonpayable
    def pay(): payable

@external
def test(some_address: address):
    FooBar(some_address).calculate()  # cannot change storage
    FooBar(some_address).query()  # cannot change storage, but reads itself
    FooBar(some_address).update()  # storage can be altered
    FooBar(some_address).pay(value=1)  # storage can be altered, and value can be sent

======================================================================================

	Importing Interfaces Импорт интерфейсов

Interfaces are imported with import or from ... import statements.
Imported interfaces are written using standard Vyper syntax. 
The body of each function is ignored when the interface is imported. If you are defining a standalone interface, 
it is normally specified by using a pass statement:

Интерфейсы импортируются с помощью операторов import или from ... import.
Импортированные интерфейсы написаны с использованием стандартного синтаксиса Vyper. 
При импорте интерфейса тело каждой функции игнорируется. Если вы определяете автономный интерфейс, 
он обычно указывается с помощью инструкции pass:
	code:
@external
def test1():
    pass

@external
def calculate() -> uint256:
    pass

You can also import a fully implemented contract and Vyper will automatically convert it to an interface. 
It is even possible for a contract to import itself to gain access to it’s own interface.

Вы также можете импортировать полностью реализованный контракт, и Vyper автоматически преобразует его в интерфейс. 
Контракт даже может импортировать себя, чтобы получить доступ к собственному интерфейсу.
	code:
import greeter as Greeter

name: public(String[10])

@external
def __init__(_name: String[10]):
    self.name = _name

@view
@external
def greet() -> String[16]:
    return concat("Hello ", Greeter(msg.sender).name())

Imports via import Импорт через import

With absolute import statements, you must include an alias as a name for the imported package. 
In the following example, failing to include as Foo will raise a compile error:

При использовании операторов абсолютного импорта вы должны включить псевдоним в качестве имени импортированного пакета. 
В следующем примере отсутствие включения в качестве Foo вызовет ошибку компиляции:
	code:
import contract.foo as Foo

Imports via from ... import Импорт через from ... import

Using from you can perform both absolute and relative imports. You may optionally include an alias - 
if you do not, the name of the interface will be the same as the file.

Используя from, вы можете выполнять как абсолютный, так и относительный импорт. При желании вы можете включить псевдоним - 
в противном случае имя интерфейса будет таким же, как и у файла.
	code:
# without an alias
from contract import foo

# with an alias
from contract import foo as Foo

Relative imports are possible by prepending dots to the contract name. A single leading dot indicates 
a relative import starting with the current package. 
Two leading dots indicate a relative import from the parent of the current package:

Относительный импорт возможен путем добавления точек к названию контракта. Одиночная точка в начале указывает 
на относительный импорт, начиная с текущего пакета. 
Две ведущие точки указывают на относительный импорт из родительского элемента текущего пакета:
	code:
from . import foo
from ..interfaces import baz

Searching For Interface Files Поиск файлов интерфейса

When looking for a file to import Vyper will first search relative to the same folder as the contract being compiled. 
For absolute imports, it also searches relative to the root path for the project. 
Vyper checks for the file name with a .vy suffix first, then .json.
When using the command line compiler, the root path defaults to to the current working directory. 
You can change it with the -p flag:

При поиске файла для импорта Vyper сначала будет искать в той же папке, что и компилируемый контракт. 
Для абсолютного импорта он также выполняет поиск относительно корневого пути проекта. 
Vyper сначала проверяет имя файла с суффиксом .vy, а затем .json.
При использовании компилятора командной строки в качестве корневого пути по умолчанию используется текущий рабочий каталог. 
Вы можете изменить его с помощью флага -p:
	code:
$ vyper my_project/contracts/my_contract.vy -p my_project

In the above example, the my_project folder is set as the root path. 
A contract cannot perform a relative import that goes beyond the top-level folder.

В приведенном выше примере папка my_project установлена как корневой путь. 
Контракт не может выполнять относительный импорт, выходящий за пределы папки верхнего уровня.

	Built-in Interfaces Встроенные интерфейсы

Vyper includes common built-in interfaces such as ERC20 and ERC721. These are imported from vyper.interfaces:
Vyper включает стандартные встроенные интерфейсы, такие как ERC20 и ERC721. Они импортированы из vyper.interfaces:

from vyper.interfaces import ERC20

implements: ERC20

You can see all the available built-in interfaces in the Vyper GitHub repo.
Вы можете увидеть все доступные встроенные интерфейсы в репозитории Vyper GitHub.

Implementing an Interface Реализация интерфейса

You can define an interface for your contract with the implements statement:
Вы можете определить интерфейс для своего контракта с помощью оператора Implements:

import an_interface as FooBarInterface

implements: FooBarInterface

This imports the defined interface from the vyper file at an_interface.vy 
(or an_interface.json if using ABI json interface type) and ensures your current contract implements all 
the necessary external functions. If any interface functions are not included in the contract, it will fail to compile. 
This is especially useful when developing contracts around well-defined standards such as ERC20.

Это импортирует определенный интерфейс из файла vyper в an_interface.vy 
(или an_interface.json при использовании типа интерфейса ABI json) и гарантирует, что ваш текущий контракт реализует все 
необходимые внешние функции. Если какие-либо функции интерфейса не включены в контракт, он не будет скомпилирован. 
Это особенно полезно при разработке контрактов на основе четко определенных стандартов, таких как ERC20.

	Extracting Interfaces Извлечение интерфейсов

Vyper has a built-in format option to allow you to make your own vyper interfaces easily.
Vyper имеет встроенную опцию форматирования, позволяющую легко создавать собственные интерфейсы vyper.
	code:
$ vyper -f interface examples/voting/ballot.vy

# Functions

@view
@external
def delegated(addr: address) -> bool:
    pass

# ...

If you want to do an external call to another contract, vyper provides an external interface extract utility as well.
Если вы хотите выполнить внешний вызов другого контракта, vyper также предоставляет утилиту извлечения внешнего интерфейса.
	code:
$ vyper -f external_interface examples/voting/ballot.vy

# External Contracts
interface Ballot:
    def delegated(addr: address) -> bool: view
    def directlyVoted(addr: address) -> bool: view
    def giveRightToVote(voter: address): nonpayable
    def forwardWeight(delegate_with_weight_to_forward: address): nonpayable
    # ...

The output can then easily be copy-pasted to be consumed.
Затем вывод можно легко скопировать и вставить для использования.


!!! Next file: vyperEventLogging  !!!