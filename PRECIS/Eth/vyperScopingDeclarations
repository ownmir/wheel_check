!!! Prev file: vyperControlStructures  !!!

	Scoping and Declarations
Variable Declaration
The first time a variable is referenced you must declare it’s type:
	Область видимости и объявления
Объявление переменной
При первом обращении к переменной вы должны объявить ее тип:
	code:
data: int128

In the above example we declare variable data with a type of int128.
В приведенном выше примере мы объявляем переменную data с типом int128.

Depending on the active scope, an initial value may or may not be assigned:
For storage variables (declared in the module scope), an initial value cannot be set
For memory variables (declared within a function), an initial value must be set
For calldata variables (function input arguments), a default value may be given
В зависимости от активной области действия начальное значение может быть назначено или не назначено:
Для переменных хранения (объявленных в области модуля) начальное значение не может быть установлено
Для переменных памяти (объявленных внутри функции) необходимо установить начальное значение
Для переменных calldata (входных аргументов функции) может быть задано значение по умолчанию.

Declaring Public Variables
Storage variables can be marked as public during declaration:
Объявление общедоступных переменных
Переменные хранилища можно пометить как public при объявлении:
	code:
data: public(int128)

The compiler automatically creates getter functions for all public storage variables. 
For the example above below, the compiler will generate a function called data 
that does not take any arguments and returns an int128, the value of the state variable data.
Компилятор автоматически создает функции получения для всех переменных общего хранилища.
В приведенном выше примере компилятор сгенерирует функцию с именем data
которая не принимает никаких аргументов и возвращает int128, значение данных переменной состояния.

For public arrays, you can only retrieve a single element via the generated getter. 
This mechanism exists to avoid high gas costs when returning an entire array. 
The getter will accept an argument to specity which element to return, for example data(0).

Для публичных массивов вы можете получить только один элемент через сгенерированный геттер.
Этот механизм существует, чтобы избежать высоких затрат на газ при возврате всего массива.
Геттер примет аргумент для specity, какой элемент возвращать, например data (0).

	Tuple Assignment
You cannot directly declare tuple types. 
However, in certain cases you can use literal tuples during assignment. 
For example, when a function returns multiple values:

Присвоение кортежа
Вы не можете напрямую объявлять типы кортежей.
Однако в некоторых случаях вы можете использовать литеральные кортежи во время присваивания.
Например, когда функция возвращает несколько значений:
	code:
@internal
def foo() -> (int128: int128):
    return 2, 3

@external
def bar():
    a: int128 = 0
    b: int128 = 0

    # the return value of `foo` is assigned using a tuple
    (a, b) = self.foo()

    # Can also skip the parenthesis
    a, b = self.foo()

	Scoping Rules
Vyper follows C99 scoping rules. 
Variables are visible from the point right after their declaration until the end of the smallest block 
that contains the declaration.

Правила определения области видимости 
Vyper следует правилам области видимости C99.
Переменные видны с точки сразу после их объявления до конца самого маленького блока,который содержит объявление.

	Module Scope
Variables and other items declared outside of a code block (functions, constants, event and struct definitions, …), 
are visible even before they were declared. This means you can use module-scoped items before they are declared.
An exception to this rule is that you can only call functions that have already been declared.

Область видимости модуля
Переменные и другие элементы, объявленные вне блока кода (функции, константы, определения событий и структур,…), 
видны даже до того, как они были объявлены. Это означает, что вы можете использовать элементы с областью видимости 
модуля до их объявления.
Исключением из этого правила является то, что вы можете вызывать только те функции, которые уже были объявлены.

Accessing Module Scope from Functions
Values that are declared in the module scope of a contract, 
such as storage variables and functions, are accessed via the self object:

Доступ к области модуля из функцийЗначения, заявленные в области модуля контракта,
такие как переменные и функции хранилища, доступны через объект self:
	code:
a: int128

@internal
def foo() -> int128
    return 42

@external
def foo() -> int128:
    b: int128 = self.foo()
    return self.a  + b

	Name Shadowing
It is not permitted for a memory or calldata variable to shadow the name 
of a storage variable. The following examples will not compile:

Затенение имениНе разрешено, чтобы переменная memory или calldata заменяла имя
переменной хранения. Следующие примеры не компилируются:
	code:
a: int128

@external
def foo() -> int128:
    # memory variable cannot have the same name as a storage variable
    a: int128 = self.a
    return a

	code:
a: int128

@external
def foo(a: int128) -> int128:
    # input argument cannot have the same name as a storage variable
    return a

	Function Scope
Variables that are declared within a function, or given as function input arguments, 
are visible within the body of that function. 
For example, the following contract is valid because each declaration of a only exists within one function’s body.

Область видимости функций
Переменные, объявленные внутри функции или заданные как входные аргументы функции,
видны в теле этой функции.
Например, следующий контракт действителен, потому что каждое объявление a существует только в теле одной функции.
	code:
@external
def foo(a: int128):
    pass

@external
def bar(a: uint256):
    pass

@external
def baz():
    a: bool = True

The following examples will not compile:
	code:
@external
def foo(a: int128):
    # `a` has already been declared as an input argument
    a: int128 = 21

	code:
@external
def foo(a: int128):
    a = 4

@external
def bar():
    # `a` has not been declared within this function
    a += 12

	Block Scopes
Logical blocks created by for and if statements have their own scope. 
For example, the following contract is valid because x only exists within 
the block scopes for each branch of the if statement:

Области видимости блока
Логические блоки, созданные операторами for и if, имеют собственную область видимости.
Например, следующий контракт действителен, потому что x существует только в пределах
области видимости блока для каждой ветви оператора if:
	code:
@external
def foo(a: bool) -> int128:
    if a:
        x: int128 = 3
    else:
        x: bool = False

In a for statement, the target variable exists within the scope of the loop. 
For example, the following contract is valid because i is no longer available upon exitting the loop:
В операторе for целевая переменная существует в пределах цикла. 
Например, следующий контракт действителен, потому что i больше не доступен после выхода из цикла:
	code:
@external
def foo(a: bool) -> int128:
    for i in [1, 2, 3]:
        pass
    i: bool = False

The following contract fails to compile because a has not been declared outside of the loop.
Следующий контракт не может быть скомпилирован, потому что a не был объявлен вне цикла.
	code:
@external
def foo(a: bool) -> int128:
    for i in [1, 2, 3]:
        a: int128 = i
    a += 3

!!! Next file: vyperBuiltinFunctions  !!!