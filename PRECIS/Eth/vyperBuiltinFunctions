!!! Prev file: vyperScopingDeclarations !!!

	BUILT IN FUNCTIONS
Vyper provides a collection of built in functions available in the global namespace of all contracts.
Встроенные функцииVyper предоставляет набор встроенных функций, доступных в глобальном пространстве имен всех контрактов.

	Bitwise Operations
Побитовые операции

bitwise_and(x: uint256, y: uint256) → uint256

Perform a “bitwise and” operation. Each bit of the output is 1 if the corresponding bit of x AND of y is 1, otherwise it’s 0.
Выполняет операцию «побитовое и». Каждый бит вывода равен 1, если соответствующий бит x И для y равен 1, в противном случае это 0.
	code:
@external
@view
def foo(x: uint256, y: uint256) -> uint256:
    return bitwise_and(x, y)

	code:
>>> ExampleContract.foo(31337, 8008135)
12353

bitwise_not(x: uint256) → uint256

Return the complement of x - the number you get by switching each 1 for a 0 and each 0 for a 1.
Возвращает дополнение x - число, которое вы получите, заменив каждую 1 на 0 и каждый 0 на 1.
	code:
@external
@view
def foo(x: uint256) -> uint256:
    return bitwise_not(x)

	code:
    return bitwise_not(x)
>>> ExampleContract.foo(0)
115792089237316195423570985008687907853269984665640564039457584007913129639935

bitwise_or(x: uint256, y: uint256) → uint256
	code:
@external
@view
def foo(x: uint256, y: uint256) -> uint256:
    return bitwise_or(x, y)

bitwise_xor(x: uint256, y: uint256) → uint256

	code:
@external
@view
def foo(x: uint256, y: uint256) -> uint256:
    return bitwise_xor(x, y)

shift(x: uint256, _shift: int128) → uint256
Return x with the bits shifted _shift places. A positive _shift value equals a left shift, a negative value is a right shift.
Вернуть x со сдвинутыми битами на _shift. Положительное значение _shift соответствует сдвигу влево, 
отрицательное значение - сдвигу вправо.
	code:
@external
@view
def foo(x: uint256, y: int128) -> uint256:
    return shift(x, y)
>>> ExampleContract.foo(2, 8)
512

	Chain Interaction
Взаимодействие в блокчейне

create_forwarder_to(target: address, value: uint256 = 0) → address

Deploys a small contract that duplicates the logic of the contract at target, 
but has it’s own state since every call to target is made using DELEGATECALL to target. 
To the end user, this should be indistinguishable from an independantly deployed contract with the same code as target.

Развертывает небольшой контракт, который дублирует логику контракта на target,
но имеет собственное состояние, поскольку каждый вызов target выполняется с помощью DELEGATECALL для target.
Для конечного пользователя это должно быть неотличимо от независимо развернутого контракта с тем же кодом, что и target.

	NOTE     ========================================================================
It is very important that the deployed contract at target is code you know and trust, 
and does not implement the selfdestruct opcode as this will affect the operation of the forwarder contract.
-target: Address of the contract to duplicate
-value: The wei value to send to the new contract address (Optional, default 0)
Returns the address of the duplicated contract.

Очень важно, чтобы развернутый контракт target был кодом, который вы знаете и которому доверяете.
и не реализует код операции самоуничтожения (selfdestruct), так как это повлияет на работу контракта пересылки.
-target: адрес дублируемого контракта
-value: значение wei для отправки на новый адрес контракта (необязательно, по умолчанию 0)
Возвращает адрес дублированного контракта.

	code:
@external
def foo(_target: address) -> address:
    return create_forwarder_to(_target)
	End NOTE ========================================================================

raw_call(to: address, data: Bytes, max_outsize: int = 0, gas: uint256 = gasLeft, value: uint256 = 0, 
is_delegate_call: bool = False, is_static_call: bool = False) → Bytes[max_outsize]

Call to the specified Ethereum address.
Вызов на указанный адрес Ethereum.

-to: Destination address to call to
-data: Data to send to the destination address
-max_outsize: Maximum length of the bytes array returned from the call. 
If the returned call data exceeds this length, only this number of bytes is returned.
-gas: The amount of gas to attach to the call. If not set, all remainaing gas is forwarded.
-value: The wei value to send to the address (Optional, default 0)
-is_delegate_call: If True, the call will be sent as DELEGATECALL (Optional, default False)
-is_static_call: If True, the call will be sent as STATICCALL (Optional, default False)

-to: адрес назначения для вызова
-data: данные для отправки по адресу назначения
-max_outsize: максимальная длина массива байтов, возвращаемого вызовом.
Если возвращаемые данные вызова превышают эту длину, возвращается только это количество байтов.
-gas: количество газа, которое нужно подключить к вызову. Если не установлен, весь оставшийся газ пересылается.
-value: значение wei для отправки по адресу (необязательно, по умолчанию 0)
-is_delegate_call: если True, вызов будет отправлен как DELEGATECALL (необязательно, по умолчанию False)
-is_static_call: если True, вызов будет отправлен как STATICCALL (необязательно, по умолчанию False)

Returns the data returned by the call as a Bytes list, with max_outsize as the max length.
Возвращает данные, возвращаемые вызовом, в виде списка Bytes с max_outsize в качестве максимальной длины.

Returns None if max_outsize is omitted or set to 0.
Возвращает None, если max_outsize опущен или установлен в 0.

	Note:
The actual size of the returned data may be less than max_outsize. You can use len to obtain the actual size.
Returns the address of the duplicated contract.
Фактический размер возвращаемых данных может быть меньше max_outsize. 
Вы можете использовать len для получения действительного размера.
Возвращает адрес дублированного контракта.
	code:
@external
@payable
def foo(_target: address) -> Bytes[32]:
    response: Bytes[32] = raw_call(_target, 0xa9059cbb, max_outsize=32, value=msg.value)
    return response

raw_log(topics: bytes32[4], data: Union[Bytes, bytes32]) → None

Provides low level access to the LOG opcodes, emitting a log without having to specify an ABI type.
-topics: List of bytes32 log topics. The length of this array determines which opcode is used.
-data: Unindexed event data to include in the log. May be given as Bytes or bytes32.

Предоставляет низкоуровневый доступ к кодам операций LOG, создавая журнал без необходимости указывать тип ABI.
-topics: Список тем журнала bytes32. Длина этого массива определяет, какой код операции используется.
-data: неиндексированные данные о событиях для включения в журнал. Может быть дано как Bytes или bytes32.

	code:
@external
def foo(_topic: bytes32, _data: Bytes[100]):
    raw_log([_topic], _data)

selfdestruct(to: address) → None

Trigger the SELFDESTRUCT opcode (0xFF), causing the contract to be destroyed.
to: Address to forward the contract’s ether balance to

Триггер код операции SELFDESTRUCT (0xFF), в результате чего контракт будет уничтожен.
to: Адрес для пересылки эфирного баланса контракта на

	!Warning
This method delete the contract from the blockchain. 
All non-ether assets associated with this contract are “burned” and the contract is no longer accessible.

!ПредупреждениеЭтот метод удаляет контракт из блокчейна.
Все неэфирные активы, связанные с этим контрактом, «сжигаются», и контракт больше не доступен.
	code:
@external
def do_the_needful():
    selfdestruct(msg.sender)

send(to: address, value: uint256) → None

Send ether from the contract to the specified Ethereum address.

to: The destination address to send ether to
value: The wei value to send to the address

Отправляет эфир из контракта на указанный адрес Ethereum.

-to: адрес назначения для отправки эфира.
-value: значение wei для отправки по адресу

Note
The amount to send is always specified in wei.
Сумма для отправки всегда указывается в wei.
	code:
@external
def foo(_receiver: address, _amount: uint256):
    send(_receiver, _amount)

	CRYPTOGRAPHY
Криптография

ecadd(a: uint256[2], b: uint256[2]) → uint256[2]

Take two points on the Alt-BN128 curve and add them together.

Берет две точки на кривой Alt-BN128 и складывает их.

	code:
@external
@view
def foo(x: uint256[2], y: uint256[2]) -> uint256[2]:
    return ecadd(x, y)

	code:
>>> ExampleContract.foo([1, 2], [1, 2])
[
    1368015179489954701390400359078579693043519447331113978918064868415326638035,
    9918110051302171585080402603319702774565515993150576347155970296011118125764,
]

ecmul(point: uint256[2], scalar: uint256) → uint256[2]

Take a point on the Alt-BN128 curve (p) and a scalar value (s), and return the result of adding the point 
to itself s times, i.e. p * s.

point: Point to be multiplied
scalar: Scalar value

Берет точку на кривой Alt-BN128 (p) и скалярное значение (s) и возвращает  результат добавления точки 
к самой себе s раз, то есть p * s.

point: Точка для умножения
скаляр: Скалярное значение
	code:
@external
@view
def foo(point: uint256[2], scalar: uint256) -> uint256[2]:
    return ecmul(point, scalar)

result:
>>> ExampleContract.foo([1, 2], 3)
[
    3353031288059533942658390886683067124040920775575537747144343083137631628272,
    19321533766552368860946552437480515441416830039777911637913418824951667761761,
]

ecrecover(hash: bytes32, v: uint256, r: uint256, s: uint256) → address

Recover the address associated with the public key from the given elliptic curve signature.
Восстанавливает адрес, связанный с открытым ключом, из данной подписи эллиптической кривой.

-r: first 32 bytes of signature
-s: second 32 bytes of signature
-v: final 1 byte of signature
Returns the associated address, or 0 on error.

-r: первые 32 байта подписи
-s: вторые 32 байта подписи
-v: последний байт подписи
Возвращает связанный адрес или 0 в случае ошибки.

keccak256(_value) → bytes32

Return a keccak256 hash of the given value.

_value: Value to hash. Can be a literal string, Bytes, or bytes32.

Возвращает хеш keccak256 заданного значения.

_value: значение хэша. Может быть буквальной строкой, Bytes или bytes32.
	code:
@external
@view
def foo(_value: Bytes[100]) -> bytes32
    return keccak256(_value)

>>> ExampleContract.foo(b"potato")
0x9e159dfcfe557cc1ca6c716e87af98fdcb94cd8c832386d0429b2b7bec02754f

sha256(_value) → bytes32

Return a sha256 (SHA2 256bit output) hash of the given value.

_value: Value to hash. Can be a literal string, Bytes, or bytes32.
Возвращает хэш sha256 (выход SHA2 256 бит) заданного значения.

_value: значение хэша. Может быть буквальной строкой, Bytes или bytes32.
	code:
@external
@view
def foo(_value: Bytes[100]) -> bytes32
    return sha256(_value)

>>> ExampleContract.foo(b"potato")
0xe91c254ad58860a02c788dfb5c1a65d6a8846ab1dc649631c7db16fef4af2dec

	Data Manipulation
Манипуляция данными

concat(a, b, *args) → Union[Bytes, String]

Take 2 or more bytes arrays of type bytes32, Bytes or String and combine them into a single value.

If the input arguments are String the return type is String. Otherwise the return type is Bytes.

Берет 2 или более байтовых массивов типа bytes32, Bytes или String и объединяет их в одно значение.

Если входные аргументы - String, возвращаемый тип - String. В противном случае возвращаемый тип - Bytes.
	code:
@external
@view
def foo(a: String[5], b: String[5], c: String[5]) -> String[100]
    return concat(a, " ", b, " ", c, "!")

>>> ExampleContract.foo("why","hello","there")
"why hello there!"

convert(value, type_) → Any

Converts a variable or literal from one type to another.
Преобразует переменную или литерал из одного типа в другой.

value: Value to convert
type_: The destination type to convert to (bool, decimal, int128, uint256 or bytes32)

-value: значение для преобразования
-type_: тип назначения для преобразования в (bool, decimal, int128, uint256 или bytes32)

Returns a value of the type specified by type_.
Возвращает значение типа, указанного в type_.

For more details on available type conversions, see Type Conversions.
Дополнительные сведения о доступных преобразованиях типов см. В разделе Преобразования типов.

extract32(b: Bytes, start: int128, output_type=bytes32) → Any

Extract a value from a Bytes list.

b: Bytes list to extract from
start: Start point to extract from
output_type: Type of output (bytes32, int128, or address). Defaults to bytes32.
Returns a value of the type specified by output_type.

Извлекает значение из списка байтов.

b: список байтов для извлечения из
start: начальная точка для извлечения
output_type: Тип вывода (bytes32, int128 или адрес). По умолчанию bytes32.
Возвращает значение типа, указанного в output_type.
	code:
@external
@view
def foo(Bytes[32]) -> address:
    return extract32(b, 12, output_type=address)

	out:
>>> ExampleContract.foo("0x0000000000000000000000009f8F72aA9304c8B593d555F12eF6589cC3A579A2")
"0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2"

slice(b: Union[Bytes, bytes32, String], start: uint256, length: uint256) → Union[Bytes, String]

Copy a list of bytes and return a specified slice.

b: value being sliced
start: start position of the slice
length: length of the slice
If the value being sliced is a Bytes or bytes32, the return type is Bytes. If it is a String, the return type is String.

Копируется список байтов и возвращается указанный срез (фрагмент).

b: значение среза (фрагмента)
start: начальная позиция среза (фрагмента)
length: длина среза
Если нарезанное значение - Bytes или bytes32, тип возвращаемого значения - Bytes. 
Если это String, возвращаемый тип - String.
	code:
@external
@view
def foo(s: string[32]) -> string[5]:
    return slice(s, 4, 5)

>>> ExampleContract.foo("why hello! how are you?")
"hello"

	Math
математика

ceil(value: decimal) → int128

Round a decimal up to the nearest integer.
Округляет десятичную дробь до ближайшего целого числа.

value: Decimal value to round up
value: десятичное значение для округления
	code:
@external
@view
def foo(value: decimal) -> uint256:
    return ceil(value)
>>> ExampleContract.foo(3.1337)
4

floor(value: decimal) → int128

Round a decimal down to the nearest integer.

value: Decimal value to round down

Округляет десятичную дробь до ближайшего целого числа.

value: десятичное значение для округления в меньшую сторону
	code:
@external
@view
def foo(value: decimal) -> uint256:
    return floor(value)
>>> ExampleContract.foo(3.1337)
3

max(a: numeric, b: numeric) → numeric
Return the creater value of a and b. The input values may be any numeric type as long as they are both of the same type. The output value is the same as the input values.
@external
@view
def foo(a: uint256, b: uint256) -> uint256:
    return max(a, b)
>>> ExampleContract.foo(23, 42)
42
min(a: numeric, b: numeric) → numeric
Returns the lesser value of a and b. The input values may be any numeric type as long as they are both of the same type. The output value is the same as the input values.
@external
@view
def foo(a: uint256, b: uint256) -> uint256:
    return min(a, b)
>>> ExampleContract.foo(23, 42)
23

pow_mod256(a: uint256, b: uint256) → uint256

Return the result of a ** b % (2 ** 256).
This method is used to perform exponentiation without overflow checks.
Возвращает результат a ** b% (2 ** 256).
Этот метод используется для возведения в степень без проверки переполнения.
	code:
@external
@view
def foo(a: uint256, b: uint256) -> uint256:
    return pow_mod256(a, b)
>>> ExampleContract.foo(2, 3)
8
>>> ExampleContract.foo(100, 100)
59041770658110225754900818312084884949620587934026984283048776718299468660736

sqrt(d: decimal) → decimal

Return the square root of the provided decimal number, using the Babylonian square root algorithm.
Возвращает квадратный корень из предоставленного десятичного числа, используя вавилонский алгоритм квадратного корня.
	code:
@external
@view
def foo(d: decimal) -> decimal:
    return sqrt(d)
>>> ExampleContract.foo(9.0)
3.0

uint256_addmod(a: uint256, b: uint256, c: uint256) → uint256

Return the modulo of (a + b) % c. Reverts if c == 0.
Возвращает по модулю (a + b)% c. Отменяет, если c == 0.

@external
@view
def foo(a: uint256, b: uint256, c: uint256) -> uint256:
    return uint256_addmod(a, b, c)
>>> (6 + 13) % 8
3
>>> ExampleContract.foo(6, 13, 8)
3

uint256_mulmod(a: uint256, b: uint256, c: uint256) → uint256

Return the modulo from (a * b) % c. Reverts if c == 0.
Возвращает модуль из (a * b)% c. Отменяет, если c == 0.

@external
@view
def foo(a: uint256, b: uint256, c: uint256) -> uint256:
    return uint256_mulmod(a, b, c)
>>> (11 * 2) % 5
2
>>> ExampleContract.foo(11, 2, 5)
2

	Utilities
Утилиты

as_wei_value(_value, unit: str) → uint256

Take an amount of ether currency specified by a number and a unit and return the integer quantity of wei equivalent to that amount.
-_value: Value for the ether unit. Any numeric type may be used, however the value cannot be negative.
-unit: Ether unit name (e.g. "wei", "ether", "gwei", etc.) indicating the denomination of _value. 
Must be given as a literal string.

Берет количество эфирной валюты, указанное числом и единицей, и возвращает целое количество wei, эквивалентное этой сумме.
-_value: значение единицы эфира. Можно использовать любой числовой тип, однако значение не может быть отрицательным.
-unit: название единицы эфира (например, «wei», «ether», «gwei» и т. д.), указывающее номинал _value. 
Должена быть дана как буквальная строка.

@external
@view
def foo(s: String[32]) -> uint256:
    return as_wei_value(1.337, "ether")

>>> ExampleContract.foo(1)
1337000000000000000

blockhash(block_num: uint256) → bytes32

Return the hash of the block at the specified height.
Возвращает хеш блока на указанной высоте (порядковый номер блока).

Note
The EVM only provides access to the most 256 blocks. This function returns EMPTY_BYTES32 
if the block number is greater than or equal to the current block number or more than 256 blocks behind the current block.

Заметка EVM обеспечивает доступ самое большее к 256 блокам. Эта функция возвращает EMPTY_BYTES32
если номер блока больше или равен текущему номеру блока или более 256 блоков позади текущего блока.

@external
@view
def foo() -> bytes32:
    return blockhash(block.number - 16)

>>> ExampleContract.foo()
0xf3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855

empty(typename) → Any

Return a value which is the default (zeroed) value of its type. 
Useful for initializing new memory variables.
-typename: Name of the type

Возвращает значение, которое является значением по умолчанию (обнуленным) для своего типа. 
Полезно для инициализации новых переменных памяти.
-typename: имя типа

@external
@view
def foo():
    x: uint256[2][5] = empty(uint256[2][5])

len(b: Union[Bytes, String]) → uint256

Return the length of a given Bytes or String.
Возвращает длину заданного значения Bytes или String.

@external
@view
def foo(s: String[32]) -> uint256:
    return len(s)
>>> ExampleContract.foo("hello")
5

method_id(method, output_type: type = Bytes[4]) → Union[bytes32, Bytes[4]]

Takes a function declaration and returns its method_id (used in data field to call it).

-method: Method declaration as given as a literal string
-output_type: The type of output (Bytes[4] or bytes32). Defaults to Bytes[4].

Returns a value of the type specified by output_type.

Принимает объявление функции и возвращает ее method_id (используется в поле данных для ее вызова).
-method: объявление метода в виде буквальной строки
-output_type: тип вывода (Bytes[4] или bytes32). По умолчанию Bytes[4].
Возвращает значение типа, указанного в output_type.

@external
@view
def foo() -> Bytes[4]:
    return method_id('transfer(address,uint256)', output_type=Bytes[4])
>>> ExampleContract.foo()
b"\xa9\x05\x9c\xbb"

!!! Next file: vyperInterfaces  !!!
